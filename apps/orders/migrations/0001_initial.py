# Generated by Django 5.2.6 on 2025-09-28 07:12

import uuid
from decimal import Decimal

import django.core.validators
import django.db.models.deletion
import djmoney.models.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("products", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Cart",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this record was created"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="When this record was last updated"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this record is active"
                    ),
                ),
                (
                    "session_key",
                    models.CharField(
                        blank=True,
                        help_text="Session key for guest carts",
                        max_length=40,
                        null=True,
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this cart expires (for guest carts)",
                        null=True,
                    ),
                ),
                (
                    "total_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total amount of items in cart",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "item_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Total number of items in cart"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        blank=True,
                        help_text="User who owns this cart (null for guest carts)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cart",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "orders_cart",
            },
        ),
        migrations.CreateModel(
            name="CartItem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this record was created"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="When this record was last updated"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this record is active"
                    ),
                ),
                (
                    "quantity",
                    models.PositiveIntegerField(
                        help_text="Quantity of this product",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "price_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[("GHS", "Ghana Cedi")],
                        default="GHS",
                        editable=False,
                        max_length=3,
                    ),
                ),
                (
                    "price",
                    djmoney.models.fields.MoneyField(decimal_places=2, max_digits=10),
                ),
                (
                    "cart",
                    models.ForeignKey(
                        help_text="Cart this item belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="orders.cart",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        help_text="Product in the cart",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cart_items",
                        to="products.product",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "orders_cart_item",
            },
        ),
        migrations.CreateModel(
            name="Order",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this record was created"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="When this record was last updated"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this record is active"
                    ),
                ),
                (
                    "order_number",
                    models.CharField(
                        help_text="Unique order number for customer reference",
                        max_length=20,
                        unique=True,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Contact email for this order", max_length=254
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(help_text="Contact phone number", max_length=20),
                ),
                (
                    "shipping_first_name",
                    models.CharField(
                        help_text="Shipping address first name", max_length=50
                    ),
                ),
                (
                    "shipping_last_name",
                    models.CharField(
                        help_text="Shipping address last name", max_length=50
                    ),
                ),
                (
                    "shipping_address_line_1",
                    models.CharField(
                        help_text="Shipping address line 1", max_length=255
                    ),
                ),
                (
                    "shipping_address_line_2",
                    models.CharField(
                        blank=True, help_text="Shipping address line 2", max_length=255
                    ),
                ),
                (
                    "shipping_city",
                    models.CharField(help_text="Shipping city", max_length=100),
                ),
                (
                    "shipping_state",
                    models.CharField(
                        help_text="Shipping state/province", max_length=100
                    ),
                ),
                (
                    "shipping_postal_code",
                    models.CharField(
                        help_text="Shipping postal/ZIP code", max_length=20
                    ),
                ),
                (
                    "shipping_country",
                    models.CharField(
                        default="United States",
                        help_text="Shipping country",
                        max_length=100,
                    ),
                ),
                (
                    "billing_same_as_shipping",
                    models.BooleanField(
                        default=True,
                        help_text="Whether billing address is same as shipping",
                    ),
                ),
                (
                    "billing_first_name",
                    models.CharField(
                        blank=True,
                        help_text="Billing address first name",
                        max_length=50,
                    ),
                ),
                (
                    "billing_last_name",
                    models.CharField(
                        blank=True, help_text="Billing address last name", max_length=50
                    ),
                ),
                (
                    "billing_address_line_1",
                    models.CharField(
                        blank=True, help_text="Billing address line 1", max_length=255
                    ),
                ),
                (
                    "billing_address_line_2",
                    models.CharField(
                        blank=True, help_text="Billing address line 2", max_length=255
                    ),
                ),
                (
                    "billing_city",
                    models.CharField(
                        blank=True, help_text="Billing city", max_length=100
                    ),
                ),
                (
                    "billing_state",
                    models.CharField(
                        blank=True, help_text="Billing state/province", max_length=100
                    ),
                ),
                (
                    "billing_postal_code",
                    models.CharField(
                        blank=True, help_text="Billing postal/ZIP code", max_length=20
                    ),
                ),
                (
                    "billing_country",
                    models.CharField(
                        blank=True, help_text="Billing country", max_length=100
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("confirmed", "Confirmed"),
                            ("processing", "Processing"),
                            ("shipped", "Shipped"),
                            ("delivered", "Delivered"),
                            ("cancelled", "Cancelled"),
                            ("refunded", "Refunded"),
                            ("returned", "Returned"),
                            ("on_hold", "On Hold"),
                            ("completed", "Completed"),
                        ],
                        default="pending",
                        help_text="Current order status",
                        max_length=20,
                    ),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("paid", "Paid"),
                            ("failed", "Failed"),
                            ("refunded", "Refunded"),
                            ("partially_refunded", "Partially Refunded"),
                            ("voided", "Voided"),
                            ("cancelled", "Cancelled"),
                            ("expired", "Expired"),
                        ],
                        default="pending",
                        help_text="Current payment status",
                        max_length=20,
                    ),
                ),
                (
                    "subtotal_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[("GHS", "Ghana Cedi")],
                        default="GHS",
                        editable=False,
                        max_length=3,
                    ),
                ),
                (
                    "subtotal",
                    djmoney.models.fields.MoneyField(
                        decimal_places=2,
                        help_text="Subtotal before tax and shipping",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(
                                Decimal("9999999.99")
                            ),
                        ],
                    ),
                ),
                (
                    "tax_amount_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[("GHS", "Ghana Cedi")],
                        default="GHS",
                        editable=False,
                        max_length=3,
                    ),
                ),
                (
                    "tax_amount",
                    djmoney.models.fields.MoneyField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Tax amount",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(
                                Decimal("9999999.99")
                            ),
                        ],
                    ),
                ),
                (
                    "shipping_cost_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[("GHS", "Ghana Cedi")],
                        default="GHS",
                        editable=False,
                        max_length=3,
                    ),
                ),
                (
                    "shipping_cost",
                    djmoney.models.fields.MoneyField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Shipping cost",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(
                                Decimal("9999999.99")
                            ),
                        ],
                    ),
                ),
                (
                    "discount_amount_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[("GHS", "Ghana Cedi")],
                        default="GHS",
                        editable=False,
                        max_length=3,
                    ),
                ),
                (
                    "discount_amount",
                    djmoney.models.fields.MoneyField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total discount amount",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(
                                Decimal("9999999.99")
                            ),
                        ],
                    ),
                ),
                (
                    "total_amount_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[("GHS", "Ghana Cedi")],
                        default="GHS",
                        editable=False,
                        max_length=3,
                    ),
                ),
                (
                    "total_amount",
                    djmoney.models.fields.MoneyField(
                        decimal_places=2,
                        help_text="Final total amount",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01")),
                            django.core.validators.MaxValueValidator(
                                Decimal("9999999.99")
                            ),
                        ],
                    ),
                ),
                (
                    "tracking_number",
                    models.CharField(
                        blank=True, help_text="Shipping tracking number", max_length=100
                    ),
                ),
                (
                    "carrier",
                    models.CharField(
                        blank=True,
                        help_text="Shipping carrier (FedEx, UPS, etc.)",
                        max_length=100,
                    ),
                ),
                (
                    "estimated_delivery_date",
                    models.DateField(
                        blank=True, help_text="Estimated delivery date", null=True
                    ),
                ),
                (
                    "shipped_at",
                    models.DateTimeField(
                        blank=True, help_text="When the order was shipped", null=True
                    ),
                ),
                (
                    "delivered_at",
                    models.DateTimeField(
                        blank=True, help_text="When the order was delivered", null=True
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Internal notes about the order"
                    ),
                ),
                (
                    "customer_notes",
                    models.TextField(
                        blank=True,
                        help_text="Customer-provided notes or special instructions",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="Customer who placed the order",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="orders",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "orders_order",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="OrderItem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this record was created"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="When this record was last updated"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this record is active"
                    ),
                ),
                (
                    "product_name",
                    models.CharField(
                        help_text="Product name at time of order", max_length=255
                    ),
                ),
                (
                    "product_sku",
                    models.CharField(
                        help_text="Product SKU at time of order", max_length=100
                    ),
                ),
                (
                    "quantity",
                    models.PositiveIntegerField(
                        help_text="Quantity ordered",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "price_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[("GHS", "Ghana Cedi")],
                        default="GHS",
                        editable=False,
                        max_length=3,
                    ),
                ),
                (
                    "price",
                    djmoney.models.fields.MoneyField(
                        decimal_places=2,
                        help_text="Price per unit at time of order",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01")),
                            django.core.validators.MaxValueValidator(
                                Decimal("9999999.99")
                            ),
                        ],
                    ),
                ),
                (
                    "total_price_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[("GHS", "Ghana Cedi")],
                        default="GHS",
                        editable=False,
                        max_length=3,
                    ),
                ),
                (
                    "total_price",
                    djmoney.models.fields.MoneyField(
                        decimal_places=2,
                        help_text="Total price for this line item",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01")),
                            django.core.validators.MaxValueValidator(
                                Decimal("9999999.99")
                            ),
                        ],
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        help_text="Order this item belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="orders.order",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        help_text="Product that was ordered",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="order_items",
                        to="products.product",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "orders_order_item",
            },
        ),
        migrations.AddIndex(
            model_name="cart",
            index=models.Index(fields=["user"], name="orders_cart_user_id_7d3dad_idx"),
        ),
        migrations.AddIndex(
            model_name="cart",
            index=models.Index(
                fields=["session_key"], name="orders_cart_session_953ed8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="cart",
            index=models.Index(
                fields=["expires_at"], name="orders_cart_expires_6fbde1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="cart",
            index=models.Index(
                fields=["created_at"], name="orders_cart_created_50584e_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="cart",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("user__isnull", False),
                    ("session_key__isnull", False),
                    _connector="OR",
                ),
                name="cart_must_have_user_or_session",
            ),
        ),
        migrations.AddIndex(
            model_name="cartitem",
            index=models.Index(fields=["cart"], name="orders_cart_cart_id_5defe9_idx"),
        ),
        migrations.AddIndex(
            model_name="cartitem",
            index=models.Index(
                fields=["product"], name="orders_cart_product_2f6bdf_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="cartitem",
            unique_together={("cart", "product")},
        ),
        migrations.AddIndex(
            model_name="order",
            index=models.Index(
                fields=["order_number"], name="orders_orde_order_n_f3ada5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="order",
            index=models.Index(fields=["user"], name="orders_orde_user_id_a87c6f_idx"),
        ),
        migrations.AddIndex(
            model_name="order",
            index=models.Index(fields=["status"], name="orders_orde_status_c6dd84_idx"),
        ),
        migrations.AddIndex(
            model_name="order",
            index=models.Index(
                fields=["payment_status"], name="orders_orde_payment_bc131d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="order",
            index=models.Index(
                fields=["created_at"], name="orders_orde_created_0e92de_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="order",
            index=models.Index(
                fields=["shipped_at"], name="orders_orde_shipped_a085d9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="order",
            index=models.Index(
                fields=["delivered_at"], name="orders_orde_deliver_1355ff_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="orderitem",
            index=models.Index(fields=["order"], name="orders_orde_order_i_6a5763_idx"),
        ),
        migrations.AddIndex(
            model_name="orderitem",
            index=models.Index(
                fields=["product"], name="orders_orde_product_48fac4_idx"
            ),
        ),
    ]
