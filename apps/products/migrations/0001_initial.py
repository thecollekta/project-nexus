# Generated by Django 5.2.6 on 2025-09-28 07:12

import uuid
from decimal import Decimal

import django.core.validators
import django.db.models.deletion
import djmoney.models.fields
from django.conf import settings
from django.db import migrations, models

import apps.products.mixins


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this record was created"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="When this record was last updated"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this record is active"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True, help_text="Category name", max_length=255
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="URL-friendly category identifier",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Category description"),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        help_text="Category image",
                        null=True,
                        upload_to="categories/images/",
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="CSS class or icon identifier for category",
                        max_length=100,
                    ),
                ),
                (
                    "sort_order",
                    models.PositiveIntegerField(
                        db_index=True, default=0, help_text="Sort order for display"
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this category is featured",
                    ),
                ),
                (
                    "meta_title",
                    models.CharField(
                        blank=True, help_text="SEO meta title", max_length=255
                    ),
                ),
                (
                    "meta_description",
                    models.TextField(
                        blank=True, help_text="SEO meta description", max_length=500
                    ),
                ),
                (
                    "meta_keywords",
                    models.CharField(
                        blank=True,
                        help_text="SEO meta keywords (comma-separated)",
                        max_length=255,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="Parent category for hierarchical structure",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="products.category",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Category",
                "verbose_name_plural": "Categories",
                "ordering": ["sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this record was created"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="When this record was last updated"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this record is active"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True, help_text="Product name", max_length=255
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="URL-friendly product identifier",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "sku",
                    models.CharField(
                        db_index=True,
                        help_text="Stock Keeping Unit - unique product identifier",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Detailed product description"),
                ),
                (
                    "short_description",
                    models.TextField(
                        blank=True,
                        help_text="Brief product description for listings",
                        max_length=500,
                    ),
                ),
                (
                    "price_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[("GHS", "Ghana Cedi")],
                        default="GHS",
                        editable=False,
                        max_length=3,
                    ),
                ),
                (
                    "price",
                    djmoney.models.fields.MoneyField(decimal_places=2, max_digits=10),
                ),
                (
                    "compare_at_price_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[("GHS", "Ghana Cedi")],
                        default="GHS",
                        editable=False,
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "compare_at_price",
                    djmoney.models.fields.MoneyField(
                        blank=True,
                        decimal_places=2,
                        help_text="Original price for comparison (shows discount)",
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01")),
                            django.core.validators.MaxValueValidator(
                                Decimal("9999999.99")
                            ),
                        ],
                    ),
                ),
                (
                    "cost_price_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[("GHS", "Ghana Cedi")],
                        default="GHS",
                        editable=False,
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "cost_price",
                    djmoney.models.fields.MoneyField(
                        blank=True,
                        decimal_places=2,
                        help_text="Cost price for margin calculation",
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(
                                Decimal("9999999.99")
                            ),
                        ],
                    ),
                ),
                (
                    "price_requires_review",
                    models.BooleanField(
                        default=False,
                        help_text="Flag for manual review if price is unusually high",
                    ),
                ),
                (
                    "stock_quantity",
                    models.PositiveIntegerField(
                        db_index=True, default=0, help_text="Current stock quantity"
                    ),
                ),
                (
                    "low_stock_threshold",
                    models.PositiveIntegerField(
                        default=10, help_text="Quantity threshold for low stock alerts"
                    ),
                ),
                (
                    "track_inventory",
                    models.BooleanField(
                        default=True,
                        help_text="Whether to track inventory for this product",
                    ),
                ),
                (
                    "allow_backorders",
                    models.BooleanField(
                        default=False, help_text="Allow orders when out of stock"
                    ),
                ),
                (
                    "weight",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Product weight in kg",
                        max_digits=8,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "dimensions_length",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Product length in cm",
                        max_digits=8,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "dimensions_width",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Product width in cm",
                        max_digits=8,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "dimensions_height",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Product height in cm",
                        max_digits=8,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "featured_image",
                    models.ImageField(
                        blank=True,
                        help_text="Primary product image",
                        null=True,
                        upload_to="products/images/",
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this product is featured",
                    ),
                ),
                (
                    "is_digital",
                    models.BooleanField(
                        default=False, help_text="Whether this is a digital product"
                    ),
                ),
                (
                    "requires_shipping",
                    models.BooleanField(
                        default=True, help_text="Whether this product requires shipping"
                    ),
                ),
                (
                    "meta_title",
                    models.CharField(
                        blank=True, help_text="SEO meta title", max_length=255
                    ),
                ),
                (
                    "meta_description",
                    models.TextField(
                        blank=True, help_text="SEO meta description", max_length=500
                    ),
                ),
                (
                    "meta_keywords",
                    models.CharField(
                        blank=True,
                        help_text="SEO meta keywords (comma-separated)",
                        max_length=255,
                    ),
                ),
                (
                    "available_from",
                    models.DateTimeField(
                        blank=True,
                        help_text="Product availability start date",
                        null=True,
                    ),
                ),
                (
                    "available_until",
                    models.DateTimeField(
                        blank=True, help_text="Product availability end date", null=True
                    ),
                ),
                (
                    "average_rating",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Average product rating",
                        max_digits=3,
                    ),
                ),
                (
                    "review_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Total number of reviews"
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        help_text="Primary product category",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="products",
                        to="products.category",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Product",
                "verbose_name_plural": "Products",
                "ordering": ["-created_at"],
            },
            bases=(models.Model, apps.products.mixins.PriceMixin),
        ),
        migrations.CreateModel(
            name="PriceHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "old_price_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[("GHS", "Ghana Cedi")],
                        default="GHS",
                        editable=False,
                        max_length=3,
                    ),
                ),
                (
                    "old_price",
                    djmoney.models.fields.MoneyField(decimal_places=2, max_digits=10),
                ),
                (
                    "new_price_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[("GHS", "Ghana Cedi")],
                        default="GHS",
                        editable=False,
                        max_length=3,
                    ),
                ),
                (
                    "new_price",
                    djmoney.models.fields.MoneyField(decimal_places=2, max_digits=10),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "changed_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="price_changes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="price_history",
                        to="products.product",
                    ),
                ),
            ],
            options={
                "verbose_name": "Price History Entry",
                "verbose_name_plural": "Price History Entries",
                "ordering": ["-timestamp"],
            },
            bases=(models.Model, apps.products.mixins.PriceMixin),
        ),
        migrations.CreateModel(
            name="ProductImage",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this record was created"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="When this record was last updated"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this record is active"
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        help_text="Product image", upload_to="products/gallery/"
                    ),
                ),
                (
                    "alt_text",
                    models.CharField(
                        blank=True,
                        help_text="Alternative text for accessibility",
                        max_length=255,
                    ),
                ),
                (
                    "sort_order",
                    models.PositiveIntegerField(
                        default=0, help_text="Sort order for image display"
                    ),
                ),
                (
                    "is_primary",
                    models.BooleanField(
                        default=False, help_text="Whether this is the primary image"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        help_text="Product this image belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="products.product",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Image",
                "verbose_name_plural": "Product Images",
                "ordering": ["sort_order", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="ProductReview",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this record was created"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="When this record was last updated"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this record is active"
                    ),
                ),
                (
                    "rating",
                    models.PositiveIntegerField(
                        help_text="Rating from 1 to 5",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Brief title for the review", max_length=255
                    ),
                ),
                (
                    "comment",
                    models.TextField(blank=True, help_text="Detailed review comment"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        help_text="The product being reviewed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="products.product",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The user who wrote the review",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Review",
                "verbose_name_plural": "Product Reviews",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ProductSpecification",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this record was created"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="When this record was last updated"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this record is active"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="Specification name/key",
                        max_length=255,
                    ),
                ),
                ("value", models.TextField(help_text="Specification value")),
                (
                    "sort_order",
                    models.PositiveIntegerField(
                        default=0, help_text="Sort order for specification display"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        help_text="Product this specification belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="specifications",
                        to="products.product",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Specification",
                "verbose_name_plural": "Product Specifications",
                "ordering": ["sort_order", "name"],
            },
        ),
        migrations.AddIndex(
            model_name="category",
            index=models.Index(
                fields=["parent", "is_active"], name="products_ca_parent__1cafc9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="category",
            index=models.Index(
                fields=["is_featured", "is_active"],
                name="products_ca_is_feat_86134d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="category",
            index=models.Index(
                fields=["sort_order", "name"], name="products_ca_sort_or_49471d_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="category",
            constraint=models.UniqueConstraint(
                fields=("name", "parent"), name="unique_category_name_per_parent"
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["category", "is_active"], name="products_pr_categor_50f5f1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["is_featured", "is_active"],
                name="products_pr_is_feat_a1ecf6_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["price", "is_active"], name="products_pr_price_ce096c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["stock_quantity", "track_inventory"],
                name="products_pr_stock_q_279963_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["sku", "is_active"], name="products_pr_sku_80897b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="productimage",
            index=models.Index(
                fields=["product", "is_primary"], name="products_pr_product_1b7905_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="productimage",
            index=models.Index(
                fields=["product", "sort_order"], name="products_pr_product_f88290_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="productreview",
            index=models.Index(
                fields=["product", "user"], name="products_pr_product_eab03a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="productreview",
            index=models.Index(fields=["rating"], name="products_pr_rating_0e31b2_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="productreview",
            unique_together={("product", "user")},
        ),
        migrations.AddIndex(
            model_name="productspecification",
            index=models.Index(
                fields=["product", "sort_order"], name="products_pr_product_94ffb0_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="productspecification",
            unique_together={("product", "name")},
        ),
    ]
